Принципы построения моделирующих алгоритмов:
Процесс функционирования системы – последовательная смена ее состояний z ⃑=(z_1 (t),z_2 (t),…,z_k (t)) в k-мерном фазовом пространстве. Задача моделирования – построение функций z1(t), z2(t),…,zk(t), на основе которых можно определить интересующие характеристики процесса функционирования системы.
1) Принцип Δt
	Детерминированная система (случайные факторы отсутствуют).
 Соотношения математической модели преобразуются к виду. Для которого удобно вычислять z_1 (τ+∆t),z_2 (τ+∆t),…,z_k (τ+∆t) по значениям zi(τ) для τ ≤ T. Организуется счетчик системного времени t (часы). В начальный момент t=t0, zi(t0)=zi0, I =1,2,…,k.
Далее прибавляется интервал времени Δt, “часы показывают” t1 = t0 +Δt.
В соответствии с соотношениями математической модели определяются zi(t0+Δt), i=1,2,…,k.
Далее t2=t1+Δt и так далее.
 Если шаг Δt достаточно мал, то можно получить приближенные значения zi(t), i = 1,2,…, k
	Стохастическая система
Соотношения математической модели определяют лишь распределение вероятностей величин zi(τ +Δt) в момент времени τ + Δt.
Начальные условия zi0 также могут быть случайными, задаваемыми некоторым распределением вероятностей.
Структура моделирующего алгоритма в основном та же. Отличие: вместо состояния z(τ+Δt) теперь нужно вычислять распределение вероятностей для возможных состояний.
Пусть t = t0. 
В соответствии с заданным распределениям вероятностей выбирается по жребию одно из возможных начальных состояний z0. Пусть “часы показывают” t1=t0+Δt. Вычисляется условное распределение вероятностей состояний для t0+ Δt при условии z0. Состояние z(t0+ Δt) определяется по жребию, и так далее.
Итог: одна из возможных реализаций случайного многомерного процесса z ⃗(t) на заданном интервале времени (t0; T).
Принцип Δt: 
	Наиболее универсальный, охватывает широкий класс реальных сложных систем и их дискретных и непрерывных элементов;
	Неэкономичный с точки зрения расхода машинного времени.
2) Принцип особых состояний:
При рассмотрении некоторых сложных систем – неравноправность состояний системы в заданном интервале времени. Два типа состояний:
	Обычные (неособые) состояния, в которых система находится почти все время;
	Особые состояния, характерные для системы в изолированные моменты времени (посутпления в систему входных сигналов, выхода одной из координат zi(t) на границу области существования и т.д.).
Для особых состояний характерно: 
	Координаты zi(t)в эти моменты времени изменяются, как правило, скачком;
	Между особыми состояниями – изменение координат непрерывно.
Пример: СМО как агрегат, в таких системах обычно свойства оцениваются по информации об особых состояниях; неособые состояния интереса для исследования не представляют.
Для таких систем построение моделирующего алгоритма по принципу Δt неэффективно.:
	При малых Δt большие затраты машинного времени на бесполезное определение большого числа неособых состояний;
	При больших Δt – опасность пропуска некоторых особых состояний.
Принцип “Особых состояний” отличается от принципа Δt тем, что включает в себя процедуру определения момента наступления следующего особого состояния по известным характеристикам данного или предыдущих состояний.
3) Принцип последовательной проводки заявок.
При моделировании процессов обработки заявок в СМО:
	Последовательное воспроизведение истории отдельных заявок в порядке их поступления в систему;
	Обращение к сведениям о других заявках – только в случае, когда это необходимо для решения вопроса о порядке обслуживания данной заявки
Такие алгоритмы: весьма экономичны, не требуют специальных мер для учета особых состояний, но имеют довольно сложную логическую структуры.
На практике: не всегда строго выдерживаются один из принципов построения моделирующих алгоритмов.
В основе многих языков моделирования – “принцип последовательной проводки” в сочетании с принципом Δt.
Формы представления моделирующих алгоритмов:
Удобная форма представления логической структуры моделей процессов функционирования систем и машинных программ – схема
	Обобщенная (укрупненная) схема моделирующего алгоритма задает общий порядок действий при моделировании системы без каких-либо уточняющих деталей. Показывает, что нужно выполнить на очередном шаге моделирования (например, обратиться к датчику случайных чисел).
	Детальная схема моделирующего алгоритма содержит уточнения, отсутствующие в обобщенной схеме. Показывает не только что следует выполнить на очередном шаге моделирования, но и как это выполнить.
	Логическая схема моделирующего алгоритма представляет собой логическую структуру модели процесса функционирования системы. Показывает упорядоченную во времени последовательность логических операций, связанных с решением задами моделирования.
	Схема программы отображает порядок программной реализации моделирующего алгоритма с использованием конкретного математического обеспечения. Представляет собой интерпретацию логической схемы моделирующего алгоритма разработчиком программы на базе конкретного алгоритмического языка.
Логическая схема алгоритма и схема программы могут быть выполнены как в укреплённой, так и в детальной форме. 
